#!/usr/bin/python3
""" Connects to the tracking collection for CRUD operations """


from db_setup import db, reg
from trackGen import trackGen
import datetime

class Tracking:
    """ tracking number class to handle tracking related task """
    def __init__(self):
        self.db = db.get_collection('tracking')

  #  def generate(self, username: str) -> str:
  #      """ Method that generates a tracking number """
  #      return trackGen(username)

    def reg_track(self, tracking: str) -> str:
        """ Register the tracking to the database """
        if len(tracking) == 13 and type(tracking[0:2]) is str and type(tracking[-1]) is str:
            date = datetime.datetime.now().strftime('%m/%d/%Y')
            self.db.insert_one({'tracking_number': tracking, 'status1': 'pending','created_on': f'{date}', 'time': f'{datetime.datetime.now().strftime("%H:%M:%S")}'})
            # update the tracking count on the database
            count = db.get_collection('count')
            count.update_one({'_id': 1}, {'$inc': {'track_gen': 1}})
        else:
            pass

    def generate(self, username: str) -> str:
        """ Method that generates a tracking number """
        tracking = trackGen(username)
        self.reg_track(tracking)
        # updates the total tracking generated by the client
        reg.update_one({'Username': username}, {'$inc': {'track_num': 1}})
        return tracking

    def tracker(self, tracking: str) -> dict:
        """Method that retrieves the tracking information"""
        data = self.db.find_one({'tracking_number': tracking})
        try:
            return {'status1': data.get('status1'), 'status2': data.get('status2')}
        except Exception:
            return 'Please enter a valid tracking number'

    def update_tracking(self, tracking: str, status: str) -> str:
        """ Updates the status of the tracking """
        date = datetime.datetime.now().strftime('%m/%d/%Y')
        time = datetime.datetime.now().strftime('%H:%M:%S') 
        data = self.db.find_one({'tracking_number': tracking})
        try:
            if data.get('status1') == 'pending' and status.lower() == 'in transit':
                self.db.update_one({'tracking_number': tracking.upper()}, {'$set': {'status1': status, 'updated_on': f'{date}-{time}'}})
            elif data.get('status1') == 'in transit' and status.lower() == 'delivered' or status.lower() == 'returned':
                self.db.update_one({'tracking_number': tracking.upper()}, {'$set': {'status2': status, 'updated_on': f'{date}-{time}'}})
            else:
                return 'Enter a Valid tracking number'
        except Exception:
            return 'Enter a Valid tracking number'
